/*
Given a sorted array of integers, find the number of occurrences of a given target value.
Your algorithmâ€™s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return 0

**Example : **
Given [5, 7, 7, 8, 8, 10] and target value 8,
return 2.
*/

int Solution::findCount(const vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=A.size();
    int low=0,high=n-1;
    int mid=low+(high-low)/2;
    int first=-1,last=-1;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==B){
             first=mid;
             high=mid-1;
        }
        else if(A[mid]<B) low=mid+1;
        else high=mid-1;
    }
    if(first==-1) return 0;
    low=first;high=n-1;
    while(low<=high){
        mid=low+(high-low)/2;
        if(A[mid]==B){
             last=mid;
             low=mid+1;
        }
        else if(A[mid]<B) low=mid+1;
        else high=mid-1;
    }
    return last-first+1;
}
