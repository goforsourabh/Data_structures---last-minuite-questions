/*
You are given a read only array of n integers from 1 to n.

Each integer appears exactly once except A which appears twice and B which is missing.

Return A and B.

Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Note that in your output A should precede B.

Example:

Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4
*/

//First approach: using xor

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
   int n=A.size();
   int xo=0;
   for(int i=0;i<n;i++){
       xo=xo^A[i];
       xo=xo^(i+1);
   }
   int setbit=xo&(~(xo-1));
   int x=0,y=0;
   for(int i=0;i<n;i++){
       if(A[i]&setbit)
        x=x^A[i];
       else
        y=y^A[i];
       if((i+1)&setbit)
        x=x^(i+1);
     else y=y^(i+1);
   }
   vector<int> res(2);
   for(int i=0;i,n;i++){
       if(A[i]==x){
           res[0]=x;
           res[1]=y;
           break;
       }
       else if(A[i]==y){
            res[0]=y;
            res[1]=x;
            break;
       }
   }
   return res;
}



//Second approach: using sum of squares

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
   long long int len = A.size();
    long long int sumOfN = (len * (len+1) ) /2, sumOfNsq = (len * (len +1) *(2*len +1) )/6;
    long long int missingNumber1=0, missingNumber2=0;
    
    for(int i=0;i<A.size(); i++){
       sumOfN -= (long long int)A[i];
       sumOfNsq -= (long long int)A[i]*(long long int)A[i];
    }
    
    missingNumber1 = (sumOfN + sumOfNsq/sumOfN)/2;
    missingNumber2= missingNumber1 - sumOfN;
    vector <int> ans;
    ans.push_back(missingNumber2);
    ans.push_back(missingNumber1);
    return ans;
}
